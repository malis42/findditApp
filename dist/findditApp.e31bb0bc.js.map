{"version":3,"sources":["redditApi.js","index.js"],"names":["searchPost","searchTerm","searchLimit","searchSortBy","fetch","then","response","json","data","children","map","catch","error","console","log","searchSubreddit","searchPostForm","document","getElementById","searchPostInput","searchSubredditForm","searchSubredditInput","addEventListener","ev","value","querySelector","showMessage","redditApi","results","output","defaultImage","forEach","post","postImage","preview","images","source","url","title","truncateText","selftext","subreddit","score","innerHTML","preventDefault","searchNsfw","message","className","parentDivId","insertBeforeDivId","messageDiv","createElement","appendChild","createTextNode","searchParentContainer","searchDiv","insertBefore","setTimeout","remove","text","limit","shortenedText","indexOf","substring"],"mappings":"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","file":"findditApp.e31bb0bc.js","sourceRoot":"..","sourcesContent":["export default {\n    searchPost: function(searchTerm, searchLimit, searchSortBy){\n        return fetch(`http://www.reddit.com/search.json?q=\n        ${searchTerm}&sort=${searchSortBy}&limit=${searchLimit}`)\n            .then(response => response.json())\n            .then(data => data.data.children.map(data => data.data))\n            .catch(error => console.log(error))\n    },\n    searchSubreddit: function (searchTerm, searchLimit) {\n\n    }\n};","import redditApi from \"./redditApi\";\n\n// Search posts constants\nconst searchPostForm = document.getElementById('search-post-form');\nconst searchPostInput = document.getElementById('search-post-input');\n\n// Search subreddits constants\nconst searchSubredditForm = document.getElementById('search-subreddit-form');\nconst searchSubredditInput = document.getElementById('search-subreddit-input');\n\n\n// Search post form event listener\nsearchPostForm.addEventListener('submit', ev => {\n    // Get search term string, sort-by condition and limit\n    const searchTerm = searchPostInput.value;\n    const searchSortBy = document.querySelector('input[name=\"post-sortby\"]:checked').value;\n    const searchLimit = document.getElementById(\"search-post-limit\").value;\n\n    // Validate input and clear it after error message pops up\n    if(searchTerm === ''){\n        showMessage('Please add a search term', 'alert-danger', 'post', 'search-post-container');\n    }\n    searchPostInput.value = \"\";\n\n    // Search through reddit\n    redditApi.searchPost(searchTerm, searchLimit, searchSortBy)\n        .then(results => {\n            let output = '<div class=\"card-columns\">';\n\n            const defaultImage = 'http://www.eggmarketingpr.com/wp-content/uploads/2016/08/Reddit.jpg';\n\n            // Loop through posts\n            results.forEach(post =>{\n                // Check for image\n                const postImage = post.preview\n                    ? post.preview.images[0].source.url\n                    : defaultImage;\n\n                output += `\n                    <div class=\"card\">\n                      <img src=\"${postImage}\" class=\"card-img-top\">\n                      <div class=\"card-body\">\n                        <h5 class=\"card-title\">${post.title}</h5>\n                        <p class=\"card-text\">\n                            ${truncateText(post.selftext, 100)}\n                        </p>\n                        <a href=\"${post.url}\" target=\"_blank\" class=\"btn btn-primary\">Read more</a>\n                        <hr>\n                        <span class=\"badge badge-secondary\">Subreddit: ${post.subreddit}</span>\n                        <span class=\"badge badge-dark\">Score: ${post.score}</span>\n                      </div>\n                    </div>\n                `;\n            });\n\n            output += '</div>';\n            document.getElementById('search-post-results').innerHTML = output;\n        });\n\n\n    ev.preventDefault();\n});\n\n// Search subreddit form event listener\nsearchSubredditForm.addEventListener('submit', ev =>{\n\n    // get search term string, and permission to search 18+ subreddits\n    const searchTerm = searchSubredditInput.value;\n    const searchNsfw = document.querySelector('input[name=\"subreddit-nsfw\"]:checked');\n\n    if(searchTerm === ''){\n        showMessage('Please add a search term', 'alert-danger', 'subreddit', 'search-subreddit-container');\n    }\n    searchSubredditInput.value = \"\";\n\n    //Search through reddit for subreddits\n\n    ev.preventDefault();\n});\n\n\n\n// Show message function\nfunction showMessage(message, className, parentDivId, insertBeforeDivId) {\n    const messageDiv = document.createElement('div');\n\n    // Add classes to created div and add text to the message div\n    messageDiv.className = `alert ${className}`;\n    messageDiv.appendChild(document.createTextNode(message));\n\n    // Get parent container and search div\n    const searchParentContainer = document.getElementById(parentDivId);\n    const searchDiv = document.getElementById(insertBeforeDivId);\n\n    // Insert the message\n    searchParentContainer.insertBefore(messageDiv, searchDiv);\n\n    // Hide alert after some time\n    setTimeout(() => document.querySelector('.alert').remove(), 5000);\n}\n\n// Truncate text\nfunction truncateText(text, limit){\n    const shortenedText = text.indexOf(' ', limit);\n    if(shortenedText == -1) return text;\n    return text.substring(0, shortenedText);\n}\n\n"]}